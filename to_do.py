# Form implementation generated from reading ui file 't.ui'
#
# Created by: PyQt6 UI code generator 6.7.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import matplotlib.pyplot as plt
from matplotlib.ticker import PercentFormatter

import matplotlib.pyplot as plt
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QApplication, QMainWindow, QDialog, QLabel, QLineEdit, QPushButton, QFileDialog
import sys
from PyQt6.QtWidgets import QInputDialog
import datetime
from PyQt6.QtCore import Qt
import sqlite3
from PyQt6.QtGui import QIcon, QPixmap
import pyqtgraph as pg
import sys
import psutil
import time
import sqlite3


name = 'todolist_base.sqlite3'

con = sqlite3.connect(name)

cur = con.cursor()


class SecondWindow(QDialog):
    def __init__(self):

        super().__init__()
        self.pixmap = QPixmap('orig.jpg')
        self.image = QLabel(self)

        self.image.move(80, 60)
        self.image.resize(250, 250)
        self.setWindowTitle('Second Window')
        self.setGeometry(400, 400, 500, 500)
        self.inp = QLineEdit('Count Done', self)
        self.inp_all = QLineEdit('All count', self)
        self.inp_all.move(200, 0)
        self.but_generate = QPushButton('generate', self)
        self.but_generate.move(200, 200)
        self.but_generate.clicked.connect(self.gener_f)

    def gener_f(self):

        data = [int(self.inp.text()), int(self.inp_all.text())]
        plt.plot(data)

        plt.gca().yaxis.set_major_formatter(PercentFormatter(1))
        plt.show()


class Ui_MainWindow(object):
    def darktheme_install_func(self, MainWindow):
        MainWindow.setStyleSheet("background-color:#7f8c8d ")
        self.menuBar.setStyleSheet("font: 8pt \"Comic Sans MS\";\n"
                                   "border-radius: 20px;\n"
                                   "background-color: #bdc3c7")
        self.menuSet_Theme.setStyleSheet("font: 8pt \"Comic Sans MS\";\n"
                                         "border-radius: 20px;\n"
                                         "background-color: #bdc3c7")

    def dark_orange_theme_install_func(self, MainWindow):
        MainWindow.setStyleSheet("background-color: rgb(39, 39, 39);")
        self.menuBar.setStyleSheet("font: 8pt \"Comic Sans MS\";\n"
                                   "border-radius: 20px;\n"
                                   "background-color: rgb(255, 101, 47);")
        self.menuSet_Theme.setStyleSheet("font: 8pt \"Comic Sans MS\";\n"
                                         "border-radius: 20px;\n"
                                         "background-color: rgb(255, 101, 47);")

    def classic_theme_install_func(self, MainWindow):
        MainWindow.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.menuBar.setStyleSheet("font: 8pt \"Comic Sans MS\";\n"
                                   "border-radius: 20px;\n"
                                   "background-color: rgb(255, 255, 230);")
        self.menuSet_Theme.setStyleSheet("font: 8pt \"Comic Sans MS\";\n"
                                         "border-radius: 20px;\n"
                                         "background-color: rgb(255, 255, 230);")

    def setupUi(self, MainWindow):
        app_icon = QIcon("F:\Python\Yandex_Pj.py\icon.png")
        app.setWindowIcon(app_icon)

        MainWindow.setObjectName("To-do")
        MainWindow.resize(542, 445)
        MainWindow.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        MainWindow.setMouseTracking(True)
        MainWindow.setTabletTracking(True)
        MainWindow.setStyleSheet("background-color: #d7cdfe")
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.listWidget = QtWidgets.QListWidget(parent=self.centralwidget)
        self.listWidget.setGeometry(QtCore.QRect(-2, -2, 571, 431))
        self.listWidget.setObjectName("listWidget")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menuBar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 542, 21))
        self.menuBar.setCursor(QtGui.QCursor(
            QtCore.Qt.CursorShape.PointingHandCursor))
        self.menuBar.setStyleSheet("font: 8pt \"Comic Sans MS\";\n"
                                   "border-radius: 20px;\n"
                                   "background-color: #cac7ff")
        self.menuBar.setObjectName("menuBar")
        self.menuSet_Theme = QtWidgets.QMenu(parent=self.menuBar)
        self.menuSet_Theme.setCursor(QtGui.QCursor(
            QtCore.Qt.CursorShape.PointingHandCursor))
        self.menuSet_Theme.setStyleSheet("font: 8pt \"Comic Sans MS\";\n"
                                         "border-radius: 20px;\n"
                                         "background-color: #cac7ff")
        self.menuSet_Theme.setObjectName("menuSet_Theme")
        self.menuGraph = QtWidgets.QMenu(parent=self.menuBar)
        self.menuGraph.setCursor(QtGui.QCursor(
            QtCore.Qt.CursorShape.PointingHandCursor))
        self.menuGraph.setObjectName("menuGraph")
        self.menuLogs = QtWidgets.QMenu(parent=self.menuBar)
        self.menuLogs.setCursor(QtGui.QCursor(
            QtCore.Qt.CursorShape.PointingHandCursor))
        self.menuLogs.setObjectName("menuLogs")
        self.menuAdd = QtWidgets.QMenu(parent=self.menuBar)
        self.menuAdd.setObjectName("menuAdd")
        MainWindow.setMenuBar(self.menuBar)
        self.actionadd = QtGui.QAction(parent=MainWindow)
        self.actionadd.setObjectName("actionadd")
        self.actionadd_2 = QtGui.QAction(parent=MainWindow)
        self.actionadd_2.setObjectName("actionadd_2")
        self.actionpob1 = QtGui.QAction(parent=MainWindow)
        self.actionpob1.setObjectName("actionpob1")
        self.actionColor = QtGui.QAction(parent=MainWindow)
        self.actionColor.setObjectName("actionColor")
        self.actionClassic = QtGui.QAction(parent=MainWindow)
        self.actionClassic.setObjectName("actionClassic")
        self.actionDark = QtGui.QAction(parent=MainWindow)
        self.actionDark.setObjectName("actionDark")
        self.actionBlue_Red_contrast = QtGui.QAction(parent=MainWindow)
        self.actionBlue_Red_contrast.setObjectName("actionBlue_Red_contrast")
        self.actiongraphic = QtGui.QAction(parent=MainWindow)
        self.actiongraphic.setObjectName("actiongraphic")
        self.actionFile_logs = QtGui.QAction(parent=MainWindow)
        self.actionFile_logs.setObjectName("actionFile_logs")
        self.actionImage = QtGui.QAction(parent=MainWindow)
        self.actionImage.setObjectName("actionImage")
        self.actionAdd = QtGui.QAction(parent=MainWindow)
        self.actionAdd.setObjectName("actionAdd")
        self.actionDel = QtGui.QAction(parent=MainWindow)
        self.actionDel.setObjectName("actionDel")
        self.actionEX = QtGui.QAction(parent=MainWindow)
        self.actionDone = QtGui.QAction(parent=MainWindow)
        self.actionDone.setObjectName("actionDone")
        self.menuSet_Theme.addAction(self.actionClassic)
        self.menuSet_Theme.addAction(self.actionDark)
        self.menuSet_Theme.addAction(self.actionBlue_Red_contrast)
        self.menuSet_Theme.addAction(self.actionImage)
        self.menuGraph.addSeparator()
        self.menuGraph.addAction(self.actiongraphic)
        self.menuLogs.addSeparator()
        self.menuLogs.addAction(self.actionFile_logs)
        self.menuAdd.addSeparator()
        self.menuAdd.addAction(self.actionAdd)
        self.menuAdd.addAction(self.actionDel)
        self.menuAdd.addAction(self.actionDone)
        self.menuAdd.addAction(self.actionEX)
        self.menuBar.addAction(self.menuSet_Theme.menuAction())
        self.menuBar.addAction(self.menuGraph.menuAction())
        self.menuBar.addAction(self.menuLogs.menuAction())
        self.menuBar.addAction(self.menuAdd.menuAction())
        self.setWindowTitle("To do list")
        self.retranslateUi(MainWindow)
        self.label_cpu_memory = QLabel(self)
        self.label_cpu_memory.setGeometry(0, 425, 120, 25)
        self.label_cpu_memory.setStyleSheet("background-color: #d7cdfe")
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.menuSet_Theme.setTitle(_translate("MainWindow", "Set Theme"))
        self.menuGraph.setTitle(_translate("MainWindow", "Graph"))
        self.menuLogs.setTitle(_translate("MainWindow", "Logs"))
        self.menuAdd.setTitle(_translate("MainWindow", "Action"))
        self.actionadd.setText(_translate("MainWindow", "Classic"))
        self.actionadd_2.setText(_translate("MainWindow", "Dark"))
        self.actionpob1.setText(_translate("MainWindow", "pob1"))
        self.actionColor.setText(_translate("MainWindow", "Color"))
        self.actionClassic.setText(_translate("MainWindow", "Classic"))
        self.actionDark.setText(_translate("MainWindow", "Dark"))
        self.actionEX.setText(_translate("MainWindow", "exit"))
        self.actionBlue_Red_contrast.setText(
            _translate("MainWindow", "Blue + Orange contrast"))
        self.actiongraphic.setText(_translate("MainWindow", "Generete graph"))
        self.actionFile_logs.setText(
            _translate("MainWindow", "Generete logs.txt"))
        self.actionImage.setText(_translate("MainWindow", "Image"))
        self.actionAdd.setText(_translate("MainWindow", "Add "))
        self.actionDel.setText(_translate("MainWindow", "Del indx"))
        self.actionDone.setText(_translate("MainWindow", "Delite all"))


class MyWidget(QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()

        self.k = 1
        self.setupUi(self)
        self.actionAdd.triggered.connect(self.add_c)
        self.actionDel.triggered.connect(self.del_c)
        self.listWidget.itemClicked.connect(self.selectionChanged)
        self.actionDone.triggered.connect(self.done_c)
        self.sp_apper = []
        self.actionFile_logs.triggered.connect(self.f)
        self.actionClassic.triggered.connect(self.classic_theme_install)
        self.actionBlue_Red_contrast.triggered.connect(
            self.dark_orange_theme_install)
        self.actiongraphic.triggered.connect(self.graph_f)
        self.actionDark.triggered.connect(self.dark_theme_install)
        self.actionEX.triggered.connect(self.exit)
        self.label_cpu_memory.setText(
            f'RAM:{psutil.virtual_memory().percent}  CPU:{psutil.cpu_percent()}')
        self.actionDark.triggered.connect(self.update)
        self.actionAdd.triggered.connect(self.update)
        self.actionDel.triggered.connect(self.update)
        self.listWidget.itemClicked.connect(self.update)
        self.actionDone.triggered.connect(self.update)
        self.sp_apper = []
        self.actionFile_logs.triggered.connect(self.update)
        self.actionClassic.triggered.connect(self.update)
        self.actionBlue_Red_contrast.triggered.connect(
            self.update)
        self.actionImage.triggered.connect(self.images)

    def images(self):
        im = QFileDialog.getOpenFileName(self, 'Выбрать картинку', '')[0]

    def update(self):
        self.label_cpu_memory.setText(
            f'RAM:{psutil.virtual_memory().percent}  CPU:{psutil.cpu_percent()}')

    def add_c(self):
        name, ok_pressed = QInputDialog.getText(
            self, "", "Enter the task")
        if ok_pressed:
            self.listWidget.addItem(
                f'Id:{self.k}    <task: {name}>          <time of addition:{datetime.datetime.now().time()}>          <status: In progress>')
            self.k += 1
            self.sp_apper.append(f'TYPE: <ADD TASK>       <TIME: {
                                 datetime.datetime.now().time()}>\n')
            s = f"INSERT INTO genres(id,info,time) VALUES({self.k},{name},{
                datetime.datetime.now().time()})"
            con.close()

    def del_c(self):
        coun, ok_pressed = QInputDialog.getText(
            self, "", "issue number:")
        if ok_pressed:
            self.listWidget.takeItem(int(coun) - 1)
            self.sp_apper.append(f'TYPE: <DEL TASK>       <TIME: {
                                 datetime.datetime.now().time()}>\n')

    def selectionChanged(self, item):
        print("Вы кликнули: {}".format(item.text()))
        s = item.text().split()[1] + '>'
        if s.count('>') < 2:
            item.setText(f'{item.text().split()[0]} {s}        <time of addition:{
                         datetime.datetime.now().time()}>          <Done>')
            self.sp_apper.append(f'TYPE: <REMOVE TASK>       <TIME: {
                datetime.datetime.now().time()}>\n')

        if item.text() == "item2":
            print("Делайте что-нибудь.")

    def done_c(self):
        self.k = 1
        self.listWidget.clear()
        self.sp_apper.append(f'TYPE: <DELITE ALL>       <TIME: {
                             datetime.datetime.now().time()}>\n')

    def f(self):
        with open('log.txt', mode='w') as fs:
            for i in self.sp_apper:
                fs.write(i)

    def classic_theme_install(self):
        super().classic_theme_install_func(self)

    def dark_orange_theme_install(self):
        super().dark_orange_theme_install_func(self)

    def dark_theme_install(self):
        super().darktheme_install_func(self)

    def exit(self):
        sys.exit(app.exec())

    def graph_f(self):
        second_window = SecondWindow()
        second_window.exec()


if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = MyWidget()
    ex.show()
    sys.exit(app.exec())
